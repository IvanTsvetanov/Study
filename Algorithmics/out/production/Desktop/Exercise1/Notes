My Notes:

Q1:
//https://www.viralpatel.net/java-convert-exponential-decimal-double-number/ - usefull

(a)
-Modify TestSort to measure the running time of different sizes of arrays. (1)
-Plot a graph of the average run time against the size of the input. (2)
(For this you will need to run the three algorithms for several arrays of the same size)
-Note: Your answer should only include a brief summary of the modifications made to the code, and the graph mentioned above.

(1) To do measure the running time of different sizes of arrays we must create, for example, three more arrays with modified sizes:
eg.
        //CREATE MORE VARIABLES TO STORE THE LENGTHS OF THE ARRAYS
        int N = 1000;
        int smallerN = 500;
        int evenSmallerN = 100;
        int biggerN = 2500;

        //CREATE MORE ARRAYS WITH THE MODIFIED SIZES
        double[] data = new double[N];
        double[] smallerData = new double[smallerN];
        double[] evenSmallerData = new double[evenSmallerN];
        double[] biggerData = new double[biggerN];

Then we must populate the arrays, via for loops, using the Math.random method().
(Math.random returns a double type number greater than or equal to 0.0 and less than 1.0.)

Afterwards we must create 3 data containers (arrays) for each of the previously created arrays (data, smallerData, evenSmallerData and biggerData).
The created sub-containers are copies of the arrays.
eg.
        //Put all the data from the original array in these ones
        double[] data1 = (double[])data.clone();
        double[] data2 = (double[])data.clone();
        double[] data3 = (double[])data.clone();

        double[] smallerData1 = (double[])smallerData.clone();
        double[] smallerData2 = (double[])smallerData.clone();
        double[] smallerData3 = (double[])smallerData.clone();

        double[] evenSmallerData1 = (double[])evenSmallerData.clone();
        double[] evenSmallerData2 = (double[])evenSmallerData.clone();
        double[] evenSmallerData3 = (double[])evenSmallerData.clone();

        double[] biggerData1 = (double[])biggerData.clone();
        double[] biggerData2 = (double[])biggerData.clone();
        double[] biggerData3 = (double[])biggerData.clone();

Moving forward, we must call each of three algorithms (insertion, shell and quick sort) for each of the sub-data containers (for data those would be data1, data2, data3).
Example for smallerData:

        //Calls the first method
        InsertionSort(smallerData1);
        time = (System.nanoTime()-time_prev_smaller)/1000000000.0;
        System.out.println("Insertion Sort\nTime= " + time);
        time_prev_smaller = System.nanoTime();

        //Calls the second method
        ShellSort(smallerData2);
        time = (System.nanoTime()-time_prev_smaller)/1000000000.0;
        System.out.println("Shell Sort\nTime= " + time);
        time_prev_smaller = System.nanoTime();

        //Calls the third method
        Arrays.sort(smallerData3);
        time = (System.nanoTime()-time_prev_smaller)/1000000000.0;
        System.out.println("Quick Sort\nTime= " + time);

In the end, if we want to display all the items (numbers) in the array (smallerData) we could use the following:

        //Display all the info
        System.out.println("SMALLER-DATA");
        System.out.println("\tPresorted\tInsertion\t\t Shell\t\t Quick");
        for (int i=0; i<smallerData.length; i++)
            System.out.println(smallerData[i] + " " + smallerData1[i] + " " + smallerData2[i] + " " + smallerData3[i]);

(2)
Insertion Sort
Input   Time
10000   0.003943101
10000   0.0075544
10000   0.0038662
10000   0.004340701
10000   0.003769
10000   0.003530701

Shell Sort
Input   Time
10000   0.001483
10000   4.31399E-4 = 0.000431399
10000   7.705E-4 = 0.0007705
10000   0.001051699
10000   5.82399E-4 = 0.000582399
10000   9.94299E-4 = 0.000994299

Quick Sort
Input   Time
10000   0.0011279
10000   8.007E-4 = 0.0008007
10000   0.0018679
10000   7.759E-4 = 0.0007759
10000   7.545E-4 = 0.0007545
10000   5.541E-4 = 0.0005541

Insertion sort - Average case - Θ(N^2)
Input   Time
1000    0.0088055
5000    0.041109199
10000   0.0468003
50000   1.913484701
100000  5.8198953
250000  28.044138899
1000000 453.9983355

Shell sort - Average case - Θ(N log N)?
Input   Time
1000    3.951E-4
5000    0.002367
10000   0.0053943
50000   0.0091528
100000  0.0195848
250000  0.0421818
1000000 0.4435409

Quick sort - Average case - Θ(N log N)
Input   Time
1000    0.0015978
5000    0.003007101
10000   0.0050133
50000   0.0126299
100000  0.0214411
250000  0.081605999
1000000 0.1834096

Graph is made in word doc named "Graph1"

AVERAGES
Insertion sort
1000    0.00603624
5000    0.026442680000000003\
10000   0.0633437
50000   1.55150986
100000  4.7312251
250000  27.9407469

Shell sort
1000    0.00068518
5000    0.0022712599999999998
10000   0.00400972
50000   0.008924660000000001
100000  0.01720788
250000  0.0451596

Quick sort
1000    0.0008149199999999999
5000    0.0031170200000000003
10000   0.00509892
50000   0.012617239999999998
100000  0.022265660000000003
250000  0.0948476

(b)
If a program runs in Θ(n^a), (that is, T(n) ≈ c ∗ n^a), then the logarithm of the run
time grows linearly with the logarithm of the size of the input. Take the logarithm
of the run time and array size for the previous data and re-plot your graph as a
log-log graph.

Graph is made in word doc named "Graph2"

(c)
Use the log-log graph to estimate the average-case time complexity of insertion sort.

N^2.

(d)
Estimate the average running time of insertion sort on an array of size 10^10.

Q2:
(a)
Write a new class to measure the average run time of this program for problems of
size 12 to 17.  (1)
Plot a graph of the logarithm of the run time against the problem size. (2)

Note: Your answer should only include a brief description of your new class and
the graph mentioned above

(1)
package Exercise2;

public class GraphExtension {

    public static void estimateTime() {

        long time_prev = System.nanoTime();
        double time;

        for (int i = 12; i < 18; i++) {
            Graph graph = new Graph(i, 0.5);
            Colouring colouring = graph.bestColouring(3);
            graph.show(colouring);
            time = (System.nanoTime() - time_prev) / 1000000000.0;
            System.out.println(i + " points time = " + time);
            time_prev = System.nanoTime();
        }

    }
}


And the main method only contains:
GraphExtension.estimateTime();

(2)
size    time
12      0.4945714
13      0.2329912
14      0.2429714
15      0.7763973
16      2.0237999
17      3.4983148

See graph - Graph3

(b)
From your measurements, estimate the average-case time complexity of the graphcolouring solver.
Explain your working in detail. Is the answer what you expected, and why?





