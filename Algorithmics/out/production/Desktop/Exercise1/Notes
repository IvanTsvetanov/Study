My Notes:

Insertion sort - Average case - Θ(N^2)
Input   Time
1000    0.0088055
5000    0.041109199
10000   0.0468003
50000   1.913484701
100000  5.8198953
250000  28.044138899
1000000 453.9983355

Shell sort - Average case - Θ(N^2)?
Input   Time
1000    3.951E-4
5000    0.002367
10000   0.0053943
50000   0.0091528
100000  0.0195848
250000  0.0421818
1000000 0.4435409

Quick sort - Average case - Θ(N log N)
Input   Time
1000    0.0015978
5000    0.003007101
10000   0.0050133
50000   0.0126299
100000  0.0214411
250000  0.081605999
1000000 0.1834096

Q1:
//https://www.viralpatel.net/java-convert-exponential-decimal-double-number/ - usefull

(a)
-Modify TestSort to measure the running time of different sizes of arrays. (1)
-Plot a graph of the average run time against the size of the input. (2)
(For this you will need to run the three algorithms for several arrays of the same size)
-Note: Your answer should only include a brief summary of the modifications made to the code, and the graph mentioned above.

(1) To do measure the running time of different sizes of arrays we must create, for example, two more arrays with modified sizes:
eg.
        //CREATE MORE VARIABLES TO STORE THE LENGTHS OF THE ARRAYS
        int N = 1000;
        int smallerN = 500;
        int evenSmallerN = 100;
        int biggerN = 2500;

        //CREATE MORE ARRAYS WITH THE MODIFIED SIZES
        double[] data = new double[N];
        double[] smallerData = new double[smallerN];
        double[] evenSmallerData = new double[evenSmallerN];
        double[] biggerData = new double[biggerN];

Then we must populate the arrays, via for loops, using the Math.random method().
(Math.random returns a double type number greater than or equal to 0.0 and less than 1.0.)

Afterwards we must create 3 data containers (arrays) for each of the previously created arrays (data, smallerData, evenSmallerData and biggerData).
The created sub-containers are copies of the arrays.
eg.
        //Put all the data from the original array in these ones
        double[] data1 = (double[])data.clone();
        double[] data2 = (double[])data.clone();
        double[] data3 = (double[])data.clone();

        double[] smallerData1 = (double[])smallerData.clone();
        double[] smallerData2 = (double[])smallerData.clone();
        double[] smallerData3 = (double[])smallerData.clone();

        double[] evenSmallerData1 = (double[])evenSmallerData.clone();
        double[] evenSmallerData2 = (double[])evenSmallerData.clone();
        double[] evenSmallerData3 = (double[])evenSmallerData.clone();

        double[] biggerData1 = (double[])biggerData.clone();
        double[] biggerData2 = (double[])biggerData.clone();
        double[] biggerData3 = (double[])biggerData.clone();

Moving forward, we must call each of three algorithms (insertion, shell and quick sort) for each of the sub-data containers (for data those would be data1, data2, data3).
Example for smallerData:

        //Calls the first method
        InsertionSort(smallerData1);
        time = (System.nanoTime()-time_prev_smaller)/1000000000.0;
        System.out.println("Insertion Sort\nTime= " + time);
        time_prev_smaller = System.nanoTime();

        //Calls the second method
        ShellSort(smallerData2);
        time = (System.nanoTime()-time_prev_smaller)/1000000000.0;
        System.out.println("Shell Sort\nTime= " + time);
        time_prev_smaller = System.nanoTime();

        //Calls the third method
        Arrays.sort(smallerData3);
        time = (System.nanoTime()-time_prev_smaller)/1000000000.0;
        System.out.println("Quick Sort\nTime= " + time);

In the end, if we want to display all the items (numbers) in the array (smallerData) we could use the following:

        //Display all the info
        System.out.println("SMALLER-DATA");
        System.out.println("\tPresorted\tInsertion\t\t Shell\t\t Quick");
        for (int i=0; i<smallerData.length; i++)
            System.out.println(smallerData[i] + " " + smallerData1[i] + " " + smallerData2[i] + " " + smallerData3[i]);

(2)
Insertion Sort
Input   Time
10000   0.003943101
10000   0.0075544
10000   0.0038662
10000   0.004340701
10000   0.003769
10000   0.003530701

Shell Sort
Input   Time
10000   0.001483
10000   4.31399E-4 = 0.000431399
10000   7.705E-4 = 0.0007705
10000   0.001051699
10000   5.82399E-4 = 0.000582399
10000   9.94299E-4 = 0.000994299

Quick Sort
Input   Time
10000   0.0011279
10000   8.007E-4 = 0.0008007
10000   0.0018679
10000   7.759E-4 = 0.0007759
10000   7.545E-4 = 0.0007545
10000   5.541E-4 = 0.0005541












